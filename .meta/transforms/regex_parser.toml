[transforms.regex_parser]
title = "Regex Parser"
allow_you_to_description = """\
parse a log field's value with a [Regular Expression][urls.regex]\
"""
beta = false
common = true
function_category = "parse"
input_types = ["log"]
output_types = ["log"]
requirements = {}

<%= render("_partials/_component_options.toml", type: "transform", name: "regex_parser") %>

[transforms.regex_parser.options.drop_field]
type = "bool"
common = true
default = true
required = true
description = "If the specified `field` should be dropped (removed) after parsing."

[transforms.regex_parser.options.field]
type = "string"
common = true
default = "message"
required = true
description = "The log field to parse."

[transforms.regex_parser.options.regex]
type = "string"
common = true
examples = [
"""\
^(?P<timestamp>[\\w\\-:\\+]+) (?P<level>\\w+) (?P<message>.*)$\
"""
]
required = true
description = """\
The Regular Expression to apply. Do not include the leading or trailing `/`.\
"""

<%= render("_partials/_types.toml", namespace: "transforms.regex_parser", common: true) %>

[[transforms.regex_parser.test_examples]]
label = "Basic"
body = """\
[[tests]]
  name = "test_regex_parser"

  [[tests.inputs]]
    insert_at = "my_transform_id"
    type = "raw"
    value = "2020-02-26T12:58:27+00:00 DEBUG hello world this is a test message"

  [[tests.outputs]]
    extract_from = "my_transform_id"
    [[tests.outputs.conditions]]
      type = "check_fields"
      "timestamp.eq" = "2020-02-26T12:58:27+00:00"
      "level.eq" = "DEBUG"
      "message.eq" = "hello world this is a test message"\
"""
