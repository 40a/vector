---
id: <%= "#{source.name}_to_#{sink.name}" %>
title: <%= "#{title}" %>
description: <%= "#{description}" %>
keywords: <%= "#{keywords.to_json}" %>
---

In this guide you'll learn how to <%= goal %> using Vector.
Vector is a log, metrics and events router that is great for this task as it's
[extremely performant][pages.index#performance] and easy to deploy in a
[variety of ways][docs.deployment].

<!--truncate-->

<%- next_step = 1 -%>
## <%= next_step %>. Setup
<%- next_step += 1 -%>

If you haven't already, install Vector. Here's a script for the lazy:

```bash
curl --proto '=https' --tlsv1.2 -sSf https://sh.vector.dev | sh
```

Or [choose your preferred installation method][docs.installation].

## <%= next_step %>. Configure a Source
<%- next_step += 1 -%>

Next, create a config file in a local directory (called `config.toml`) and add a
`<%= source.name %>` source by pasting in this snippet:

```toml
<%= config_example(source.options_list, path: "#{source.type.pluralize}.my-source-id", common: true) %>
```
<%- next_input = "my-source-id" -%>

<%- if needs_conversion -%>
## <%= next_step %>. Transform Events
<%- next_step += 1 -%>

<%- converter = with_input(event_converter(), next_input) -%>
We will need to convert the <%= event_from %> events consumed from our
`<%= source.name%>` source into <%= event_to %>s. We can do that with a
`<%= converter.name %>` transform:

```toml
<%= config_example(converter.options_list, path: "#{converter.type.pluralize}.converter", common: true) %>
```

<%- if next_input == "my-source-id" -%>
Note that for the `inputs` field we specify our `<%= source.name %>` source by
its name `my-source-id`.

<%- end -%>
<%- next_input = "converter" -%>
<%- end -%>
## <%= next_step %>. Configure a Sink
<%- next_step += 1 -%>

Now configure your sink, making sure to set the input to `<%= next_input %>`:

<%- sink_example = with_input(sink, next_input) -%>
```toml
<%= config_example(sink_example.options_list, path: "#{sink_example.type.pluralize}.my-sink-id", common: true) %>
```

## <%= next_step %>. Run It
<%- next_step += 1 -%>

That's it! You're ready to execute the pipeline. You can run it locally with:

```sh
vector -c ./config.toml
```

Vector is very flexible and can be deployed in a way that suits your target
environment. For guidance check out our [deployment documentation][docs.deployment].

## Optional Extras

<%- if supports_parsing -%>
### <%= next_step %>. Parse Events
<%- next_step += 1 -%>

<%- parser = with_input(event_parser(), next_input) -%>
If our logs consumed from <%= source.title %> are structured then we should
parse them out before writing them to <%= sink.title %>. We can do that with a
range of [transforms][docs.transforms], in this example we will use
[`<%= parser.name %>`][docs.transforms.<%= parser.name%>].

Paste the following transform into your config:

```toml
<%= config_example(parser.options_list, path: "#{parser.type.pluralize}.parser", common: true) %>
```

Note that we wish to parse events as they are consumed from our
`<%= source.name %>` source, therefore we set the field `inputs` to
`["my-source-id"]`.

<%- if next_input == "my-source-id" -%>
In order to have the parsed events from this transform reach our
`<%= sink.name %>` sink we need the sink to consume events from the new
transform by updating the field `inputs` to `["parser"]`.
<%- next_input = "parser" -%>
<%- else -%>
In order to insert this parser transform before our `<%= next_input %>`
transform we must update the `inputs` field of `<%= next_input %>` to
`["parser"]`.
<%- end -%>

<%- end -%>
### <%= next_step %>. Enrich Events
<%- next_step += 1 -%>

We can also choose to enrich our events with [transforms][docs.transforms]. In
this example we're going to add a
[`<%= event_enricher_type() %>`][docs.transforms.<%= event_enricher_type() %>]
transform:

<%- enricher = with_input(event_enricher(), next_input) -%>
```toml
<%= config_example(enricher.options_list, path: "#{enricher.type.pluralize}.enricher", common: true) %>
```

Note that for the `inputs` field we've specified `<%= next_input %>` so that
this enrichment is executed afterwards.

In order to have the enriched events from this transform reach our
`<%= sink.name %>` sink we need the sink to consume events from the new
transform by updating the field `inputs` to `["enricher"]`.

[docs.installation]: /docs/setup/installation/
[docs.deployment]: /docs/setup/deployment/
[pages.index#performance]: /#performance
[docs.transforms]: /docs/reference/transforms/
[docs.transforms.<%= event_enricher_type() %>]: /docs/references/transforms/<%= event_enricher_type() %>
<%- if supports_parsing -%>
[docs.transforms.`<%= parser.name %>`]: /docs/reference/transforms/<%= parser.name%>
<%- end -%>